upstream django {
    server unix:///run/uwsgi/uwsgi.sock;      # for a file socket
}

upstream status {
    server unix:///run/uwsgi/status.sock;      # for a file socket
}



server {
    listen       80 default_server;
    listen       [::]:80 default_server;
    server_name  BASE_SITE_URL;

    charset     utf-8;

    set $my_host $host;
    # if the host header is an ip address change it to www.mysite.com
    # this works around requests coming from ELB with either the instance's
    # internal ip address in the case of health checks or an unknown internal
    # ip address in the case of latency checks. translating them to a known
    # good host header makes django's ALLOWED_HOSTS happy

    if ($host ~ "\d+\.\d+\.\d+\.\d+") {
        set $my_host "BASE_SITE_URL";
    }

    include /etc/nginx/default.d/basics.conf;
    include /etc/nginx/default.d/status.conf;

    location @default {
 	    include /etc/nginx/uwsgi_params;
 	    uwsgi_param HTTP_HOST $my_host;
    	uwsgi_pass   django;
        break;
    }

    location /accounts/login/ {
        limit_req zone=login burst=5;
    	uwsgi_pass   django;
 	    include /etc/nginx/uwsgi_params;
    }

    location / {
        try_files /maintenance.html @default;
    }

}

